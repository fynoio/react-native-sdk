{"version":3,"file":"index.js","sources":["../index.js"],"sourcesContent":["import { NativeModules, Platform } from \"react-native\";\n\nconst { FynoReactNative } = NativeModules;\n\nconsole.log(\"FynoReactNative in index.js =>\", FynoReactNative);\n\nfunction initialise(workspaceId, integrationID, userId, version) {\n  return new Promise((resolve, reject) => {\n    try {\n      const user = Platform.OS === \"android\" && userId === \"\" ? null : userId;\n      FynoReactNative.initialise(\n        workspaceId,\n        integrationID,\n        user,\n        version || \"live\"\n      );\n      resolve();\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\nfunction registerPush(\n  xiaomiApplicationId,\n  xiaomiApplicationKey,\n  pushRegion,\n  provider\n) {\n  return new Promise((resolve, reject) => {\n    try {\n      FynoReactNative.registerPush(\n        xiaomiApplicationId,\n        xiaomiApplicationKey,\n        pushRegion || \"INDIA\",\n        provider\n      );\n      resolve();\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\nfunction identifyUser(uniqueID, userName) {\n  return new Promise((resolve, reject) => {\n    try {\n      FynoReactNative.identify(uniqueID, userName);\n      resolve();\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\nfunction registerInapp(integrationID) {\n  return new Promise((resolve, reject) => {\n    try {\n      FynoReactNative.registerInapp(integrationID);\n      resolve();\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\nfunction mergeProfile(oldDistinctId, newDistinctId) {\n  return new Promise((resolve, reject) => {\n    try {\n      FynoReactNative.mergeProfile(oldDistinctId, newDistinctId);\n      resolve();\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\nfunction updateStatus(callBackUrl, status) {\n  return new Promise((resolve, reject) => {\n    try {\n      FynoReactNative.updateStatus(callBackUrl, status);\n      resolve();\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\nfunction resetUser() {\n  return new Promise((resolve, reject) => {\n    try {\n      FynoReactNative.resetUser();\n      resolve();\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\nfunction updateName(userName) {\n  return new Promise((resolve, reject) => {\n    try {\n      FynoReactNative.updateName(userName);\n      resolve();\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\nfunction isFynoNotification(remoteMessage) {\n  return new Promise((resolve, reject) => {\n    try {\n      if (Platform.OS !== \"android\") {\n        throw new Error(\"isFynoNotification is only supported on Android\");\n      }\n\n      resolve(FynoReactNative.isFynoNotification(remoteMessage));\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\nfunction handleFynoNotification(remoteMessage) {\n  return new Promise((resolve, reject) => {\n    try {\n      if (Platform.OS !== \"android\") {\n        throw new Error(\"handleFynoNotification is only supported on Android\");\n      }\n\n      FynoReactNative.handleFynoNotification(remoteMessage);\n      resolve();\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\nexport default FynoRN = {\n  initialise,\n  registerPush,\n  identifyUser,\n  mergeProfile,\n  updateStatus,\n  resetUser,\n  registerInapp,\n  updateName,\n  isFynoNotification,\n  handleFynoNotification,\n};\n\nmodule.exports = {\n  initialise,\n  registerPush,\n  identifyUser,\n  mergeProfile,\n  updateStatus,\n  resetUser,\n  registerInapp,\n  updateName,\n  isFynoNotification,\n  handleFynoNotification,\n};\n"],"names":["FynoReactNative","NativeModules","initialise","workspaceId","integrationID","userId","version","Promise","resolve","reject","user","Platform","OS","err","registerPush","xiaomiApplicationId","xiaomiApplicationKey","pushRegion","provider","identifyUser","uniqueID","userName","identify","registerInapp","mergeProfile","oldDistinctId","newDistinctId","updateStatus","callBackUrl","status","resetUser","updateName","isFynoNotification","remoteMessage","Error","handleFynoNotification","console","log","FynoRN","module","exports"],"mappings":"+FAEA,IAAQA,gBAAoBC,0CAI5B,SAASC,WAAWC,EAAaC,EAAeC,EAAQC,GACtD,OAAO,IAAIC,QAAQ,CAACC,EAASC,KAC3B,IACE,IAAMC,EAAuB,YAAhBC,qBAASC,IAA+B,KAAXP,EAAgB,KAAOA,EACjEL,gBAAgBE,WACdC,EACAC,EACAM,EACAJ,GAAW,QAEbE,IACA,MAAOK,GACPJ,EAAOI,CAAG,GAEb,CACH,CAEA,SAASC,aACPC,EACAC,EACAC,EACAC,GAEA,OAAO,IAAIX,QAAQ,CAACC,EAASC,KAC3B,IACET,gBAAgBc,aACdC,EACAC,EACAC,GAAc,QACdC,GAEFV,IACA,MAAOK,GACPJ,EAAOI,CAAG,GAEb,CACH,CAEA,SAASM,aAAaC,EAAUC,GAC9B,OAAO,IAAId,QAAQ,CAACC,EAASC,KAC3B,IACET,gBAAgBsB,SAASF,EAAUC,CAAQ,EAC3Cb,IACA,MAAOK,GACPJ,EAAOI,CAAG,GAEb,CACH,CAEA,SAASU,cAAcnB,GACrB,OAAO,IAAIG,QAAQ,CAACC,EAASC,KAC3B,IACET,gBAAgBuB,cAAcnB,CAAa,EAC3CI,IACA,MAAOK,GACPJ,EAAOI,CAAG,GAEb,CACH,CAEA,SAASW,aAAaC,EAAeC,GACnC,OAAO,IAAInB,QAAQ,CAACC,EAASC,KAC3B,IACET,gBAAgBwB,aAAaC,EAAeC,CAAa,EACzDlB,IACA,MAAOK,GACPJ,EAAOI,CAAG,GAEb,CACH,CAEA,SAASc,aAAaC,EAAaC,GACjC,OAAO,IAAItB,QAAQ,CAACC,EAASC,KAC3B,IACET,gBAAgB2B,aAAaC,EAAaC,CAAM,EAChDrB,IACA,MAAOK,GACPJ,EAAOI,CAAG,GAEb,CACH,CAEA,SAASiB,YACP,OAAO,IAAIvB,QAAQ,CAACC,EAASC,KAC3B,IACET,gBAAgB8B,YAChBtB,IACA,MAAOK,GACPJ,EAAOI,CAAG,GAEb,CACH,CAEA,SAASkB,WAAWV,GAClB,OAAO,IAAId,QAAQ,CAACC,EAASC,KAC3B,IACET,gBAAgB+B,WAAWV,CAAQ,EACnCb,IACA,MAAOK,GACPJ,EAAOI,CAAG,GAEb,CACH,CAEA,SAASmB,mBAAmBC,GAC1B,OAAO,IAAI1B,QAAQ,CAACC,EAASC,KAC3B,IACE,GAAoB,YAAhBE,qBAASC,GACX,MAAM,IAAIsB,MAAM,iDAAiD,EAGnE1B,EAAQR,gBAAgBgC,mBAAmBC,CAAa,CAAC,EACzD,MAAOpB,GACPJ,EAAOI,CAAG,GAEb,CACH,CAEA,SAASsB,uBAAuBF,GAC9B,OAAO,IAAI1B,QAAQ,CAACC,EAASC,KAC3B,IACE,GAAoB,YAAhBE,qBAASC,GACX,MAAM,IAAIsB,MAAM,qDAAqD,EAGvElC,gBAAgBmC,uBAAuBF,CAAa,EACpDzB,IACA,MAAOK,GACPJ,EAAOI,CAAG,GAEb,CACH,CArIAuB,QAAQC,IAAI,iCAAkCrC,eAAe,EAuI7D,UAAesC,OAAS,CACtBpC,WAAAA,WACAY,aAAAA,aACAK,aAAAA,aACAK,aAAAA,aACAG,aAAAA,aACAG,UAAAA,UACAP,cAAAA,cACAQ,WAAAA,WACAC,mBAAAA,mBACAG,uBAAAA,sBACF,EAEAI,OAAOC,QAAU,CACftC,WAAAA,WACAY,aAAAA,aACAK,aAAAA,aACAK,aAAAA,aACAG,aAAAA,aACAG,UAAAA,UACAP,cAAAA,cACAQ,WAAAA,WACAC,mBAAAA,mBACAG,uBAAAA,sBACF"}